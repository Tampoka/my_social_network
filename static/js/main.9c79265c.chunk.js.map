{"version":3,"sources":["components/Users/Users.module.css","components/Dialogs/Dialogs.module.css","components/Friends/Friends.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.module.css","components/Nav/Nav.module.css","reportWebVitals.ts","api/api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/users-reducer.ts","redux/auth-reducer.ts","redux/redux-store.ts","components/Friends/Friends.tsx","components/Nav/Nav.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","assets/images/user.png","components/Users/Users.tsx","assets/loader/Interwind-1.5s-367px.svg","common/Preloader/Preloader.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","response","data","userId","post","delete","profileAPI","authAPI","ADD_POST","UPDATE_NEW_POST_TEXT","SET_USER_PROFILE","initialState","posts","id","message","likesCount","newPostText","profile","profileReducer","state","action","type","newPost","newText","ADD_MESSAGE","UPDATE_NEW_MESSAGE_TEXT","dialogs","name","messages","newMessageText","dialogsReducer","newMessage","friends","img","isOnline","sidebarReducer","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","acceptFollow","acceptUnFollow","toggleIsFetching","toggleFollowingProgress","usersReducer","map","u","followed","pageNumber","filter","SET_USER_DATA","email","login","isAuth","setAuthUserData","authReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","auth","middlewareEnhancer","applyMiddleware","thunkMiddleware","composedEnhancers","composeWithDevTools","store","createStore","window","Friends","props","avatar","f","activeClass","s","active","className","src","alt","userName","avatarContainer","Nav","navContainer","nav","item","to","activeClassName","News","Music","Settings","mapStateToPropsForRedirect","withAuthRedirect","Component","connect","restProps","DialogItem","path","dialog","Message","Dialogs","dialogsElements","d","messagesElements","m","dialogItems","sendMessage","placeholder","onChange","e","text","currentTarget","value","updateNewMessageText","onClick","addMessage","compose","dispatch","updateNewMessageTextActionCreator","Users","pagesCount","Math","ceil","pages","i","push","usersContainer","p","pageClass","page","activePage","onPageChanged","user","userPhoto","photos","small","unFollow","disabled","some","follow","userInfo","status","userLocation","Preloader","preloader","style","width","UsersContainer","getUsers","setCurrentPage","this","React","mapDispatchToProps","items","resultCode","ProfileStatus","editMode","activateEditMode","setState","deactivateEditMode","onDoubleClick","onBlur","autoFocus","ProfileInfo","descriptionBlock","large","fullName","Post","MyPosts","postElements","postsBlock","updateNewPostText","addPost","MyPostsContainer","Profile","ProfileContainer","Number","match","params","showUserProfile","withRouter","Header","header","loginBlock","HeaderContainer","getAuth","Login","App","getState","render","DialogsContainer","component","rerenderEntireTree","ReactDOM","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.9c79265c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersContainer\":\"Users_usersContainer__2ul14\",\"page\":\"Users_page__3_87d\",\"activePage\":\"Users_activePage__2u_Ul\",\"user\":\"Users_user__2jCuU\",\"userPhoto\":\"Users_userPhoto__3SQpR\",\"avatar\":\"Users_avatar__38AtL\",\"status\":\"Users_status__2d0o4\",\"userName\":\"Users_userName__1nlAm\",\"userLocation\":\"Users_userLocation__-BNuJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__15v-t\",\"dialogItems\":\"Dialogs_dialogItems__1dXZ2\",\"dialog\":\"Dialogs_dialog__2MkRK\",\"messages\":\"Dialogs_messages__2g7Bj\",\"active\":\"Dialogs_active___A4O3\",\"message\":\"Dialogs_message__17PX9\",\"sendMessage\":\"Dialogs_sendMessage___xD_4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatarContainer\":\"Friends_avatarContainer__2hxxm\",\"avatar\":\"Friends_avatar__1Svic\",\"active\":\"Friends_active__3fA9r\",\"userName\":\"Friends_userName__2TtBv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"ProfileInfo_avatar__3HJco\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__Zh1WA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__VkIMX\",\"posts\":\"MyPosts_posts__2LCKN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__VpuLr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__SVvlg\",\"loginBlock\":\"Header_loginBlock__1jZ8_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navContainer\":\"Nav_navContainer__2S3Ft\",\"nav\":\"Nav_nav__cuals\",\"item\":\"Nav_item__2k723\",\"active\":\"Nav_active__2ew0P\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import axios from \"axios\";\r\nimport {UserType} from \"../redux/users-reducer\";\r\nimport {ProfileType} from \"../redux/profile-reducer\";\r\n\r\n\r\ntype GetUserResponseType = {\r\n    items: UserType[]\r\n    error: string | null\r\n    totalCount: number\r\n}\r\n\r\ntype FollowResponseType = {\r\n    data: any\r\n    messages: string[]\r\n    fieldsErrors: string[]\r\n    resultCode: 0 | 1\r\n}\r\n\r\ntype GetProfileResponseType = ProfileType\r\n\r\ntype AuthMeResponseType = {\r\n    data: {\r\n        id: string | null\r\n        login: string\r\n        email: string\r\n    }\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    resultCode: 0 | 1\r\n}\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"b22dc3a8-54db-4578-99ea-53ac8029e06a\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get<GetUserResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<FollowResponseType>(`follow/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n    unFollow(userId: number) {\r\n        return instance.delete<FollowResponseType>(`follow/${userId}`)\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<GetProfileResponseType>(`profile/${userId}`)\r\n            .then(response=>response.data)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instance.get<AuthMeResponseType>(`auth/me`)\r\n            .then(response => response.data)\r\n    }\r\n}","import {AddMessageActionType, UpdateNewMessageActionType} from \"./dialogs-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {profileAPI} from \"../api/api\";\r\n\r\nexport type InitialStateType={\r\n    posts:PostType[]\r\n    newPostText:string\r\n    profile:null|ProfileType\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfileType={\r\n    aboutMe: string | null\r\n    contacts: {\r\n        facebook: string | null\r\n        github: string | null\r\n        instagram: string | null\r\n        mainLink: string | null\r\n        twitter: string | null\r\n        vk: string | null\r\n        website: string | null\r\n        youtube: string | null\r\n    }\r\n    fullName: string | null\r\n    lookingForAJob: boolean | null\r\n    lookingForAJobDescription: string | null\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n    userId: number\r\n}\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\nconst SET_USER_PROFILE = \"SET-USER-PROFILE\";\r\n\r\nconst initialState={\r\n    posts: [\r\n        {id: 1, message: \"How are you?\", likesCount: 19},\r\n        {id: 2, message: \"Where have you been?\", likesCount: 3},\r\n        {id: 3, message: \"Pics from our party yesterday\", likesCount: 8},\r\n        {id: 4, message: \"How important is to be proactive?\", likesCount: 27},\r\n        {id: 5, message: \"What are your goals for today, for this week?\", likesCount: 54},\r\n    ],\r\n    newPostText: \"Hello!\",\r\n    profile:null\r\n}\r\nconst profileReducer=(state:InitialStateType=initialState, action:ProfileActionsType):InitialStateType=>{\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: PostType = {\r\n                id: 6,\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            }\r\n\r\n            return {...state,\r\n            posts:[...state.posts,newPost],\r\n            newPostText:\"\"}\r\n        case UPDATE_NEW_POST_TEXT:\r\n            return {...state,\r\n            newPostText:action.newText}\r\n        case SET_USER_PROFILE:\r\n            return {...state, profile:action.profile}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ProfileActionsType =AddPostActionType|UpdateNewPostActionType|AddMessageActionType|UpdateNewMessageActionType|SetUserProfileType\r\n\r\nexport type AddPostActionType = ReturnType<typeof addPost>\r\n\r\nexport type UpdateNewPostActionType = ReturnType<typeof updateNewPostText>\r\n\r\nexport type SetUserProfileType = ReturnType<typeof setUserProfile>\r\n\r\nexport const addPost = ()=> ({type: ADD_POST}as const)\r\n\r\nexport const updateNewPostText = (text: string)=> ({\r\n    type: UPDATE_NEW_POST_TEXT,\r\n    newText: text\r\n} as const)\r\n\r\nexport const setUserProfile = (profile: ProfileType)=> ({\r\n    type: SET_USER_PROFILE,\r\n    profile\r\n} as const)\r\n\r\n\r\n// thunk\r\n\r\nexport const showUserProfile = (userId:number) => {\r\n    return (dispatch: ThunkDispatch<AppStateType, unknown, ProfileActionsType>) => {\r\n        profileAPI.getProfile(userId)\r\n            .then(data=>{\r\n                dispatch(setUserProfile(data))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer","import {AddPostActionType, UpdateNewPostActionType} from \"./profile-reducer\";\r\n\r\nexport type InitialStateType = {\r\n    dialogs: DialogType[]\r\n    messages: MessageType[]\r\n    newMessageText: string\r\n}\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nconst ADD_MESSAGE = \"ADD-MESSAGE\";\r\nconst UPDATE_NEW_MESSAGE_TEXT = \"UPDATE-NEW-MESSAGE-TEXT\";\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Victor\"},\r\n        {id: 3, name: \"Bob\"},\r\n        {id: 4, name: \"John\"},\r\n        {id: 5, name: \"Anna\"},\r\n        {id: 6, name: \"Dennis\"},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"How are you?\"},\r\n        {id: 2, message: \"Are you busy now?\"},\r\n        {id: 3, message: \"Today I have a party:)\"},\r\n        {id: 4, message: \"Can you help me with code review today?\"},\r\n        {id: 5, message: \"Are you going to gim today?\"},\r\n    ],\r\n    newMessageText: \"How have you been?\"\r\n}\r\nconst dialogsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            const newMessage: MessageType = {\r\n                id: 6,\r\n                message: state.newMessageText,\r\n            }\r\n            return {\r\n                ...state,\r\n                newMessageText: \"\",\r\n                messages: [...state.messages, newMessage]\r\n            }\r\n        case UPDATE_NEW_MESSAGE_TEXT:\r\n            return {\r\n                ...state,\r\n                newMessageText: action.newText\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport type ActionsType =\r\n    AddPostActionType\r\n    | UpdateNewPostActionType\r\n    | AddMessageActionType\r\n    | UpdateNewMessageActionType\r\n\r\nexport type AddMessageActionType = ReturnType<typeof addMessageActionCreator>\r\n\r\nexport type UpdateNewMessageActionType = ReturnType<typeof updateNewMessageTextActionCreator>\r\n\r\nexport const addMessageActionCreator = () => ({type: ADD_MESSAGE} as const)\r\n\r\nexport const updateNewMessageTextActionCreator = (text: string) => ({\r\n    type: UPDATE_NEW_MESSAGE_TEXT,\r\n    newText: text\r\n} as const)\r\n\r\n\r\nexport default dialogsReducer","\r\nexport type SidebarType={\r\n    friends:FriendType[]\r\n}\r\nexport type InitialStateType={\r\n    friends:FriendType[]\r\n}\r\nexport type FriendType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n    isOnline: boolean\r\n}\r\n\r\nlet initialState={\r\n    friends: [\r\n        {\r\n            id: 1,\r\n            name: \"Bob\",\r\n            img: \"https://images.unsplash.com/photo-1600603955656-e3c9e1ad7f64?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=387&q=80\",\r\n            isOnline: true\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Kate\",\r\n            img: \"https://images.unsplash.com/photo-1491349174775-aaafddd81942?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=387&q=80\",\r\n            isOnline: false\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"John\",\r\n            img: \"https://images.unsplash.com/photo-1599566150163-29194dcaad36?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=387&q=80\",\r\n            isOnline: true\r\n        }\r\n\r\n    ] as Array<FriendType>\r\n}\r\nconst sidebarReducer=(state:InitialStateType=initialState, action:any):InitialStateType=>{\r\n    return state\r\n}\r\n\r\nexport  default  sidebarReducer","import {usersAPI} from \"../api/api\";\r\nimport {ThunkDispatch} from \"redux-thunk\"\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nexport type InitialStateType = {\r\n    users: UserType[]\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    status: string\r\n    followed: boolean\r\n    location: LocationType\r\n}\r\n\r\nexport type LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\"\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\"\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\"\r\n\r\nconst initialState = {\r\n    users: [\r\n        /* {\r\n             id: 1,\r\n             fullName: \"Kate\",\r\n             photoUrl:\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS5dMYMr1CCTycSQd2YQatl4bvzK5T90Renlw&usqp=CAU\",\r\n             status: \"I am looking for new job\",\r\n             followed: true,\r\n             location: {city: \"New York\", country: \"USA\"}\r\n         },\r\n         {\r\n             id: 2,\r\n             fullName: \"John\",\r\n             photoUrl:\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT8wvbPOt0gK-5yGATP1Beo7Mkk7LT1M6KZLw&usqp=CAU\",\r\n             status: \"I am moved to new office\",\r\n             followed: true,\r\n             location: {city: \"London\", country: \"Great Britain\"}\r\n         },\r\n         {\r\n             id: 3,\r\n             fullName: \"Bob\",\r\n             photoUrl:\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRbz8f-cdfPQtfH1EP3x1V2pMDyLpDMmuzKbg&usqp=CAU\",\r\n             status: \"Happiest ever\",\r\n             followed: false,\r\n             location: {city: \"Melbourne\", country: \"Australia\"}\r\n         },*/\r\n    ],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [20416]\r\n\r\n}\r\nconst usersReducer = (state: InitialStateType = initialState, action: UsersActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.pageNumber\r\n            }\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport  type UsersActionsType =\r\n    FollowActionType\r\n    | UnFollowActionType\r\n    | SetUsersActionType\r\n    | SetCurrentPageActionType\r\n    | SetTotalUsersCountActionType\r\n    | ToggleIsFetchingActionType\r\n    | ToggleFollowingProgress\r\n\r\nexport type FollowActionType = ReturnType<typeof acceptFollow>\r\nexport type UnFollowActionType = ReturnType<typeof acceptUnFollow>\r\nexport type SetUsersActionType = ReturnType<typeof setUsers>\r\nexport type SetCurrentPageActionType = ReturnType<typeof setCurrentPage>\r\nexport type SetTotalUsersCountActionType = ReturnType<typeof setTotalUsersCount>\r\nexport type ToggleIsFetchingActionType = ReturnType<typeof toggleIsFetching>\r\nexport type ToggleFollowingProgress = ReturnType<typeof toggleFollowingProgress>\r\n\r\nexport const acceptFollow = (userId: number) => ({type: FOLLOW, userId} as const)\r\nexport const acceptUnFollow = (userId: number) => ({type: UNFOLLOW, userId} as const)\r\nexport const setUsers = (users: UserType[]) => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPage = (pageNumber: number) => ({type: SET_CURRENT_PAGE, pageNumber} as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount\r\n} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n} as const)\r\n\r\n\r\n//thunk\r\nexport const getUsers = (currentPage:number, pageSize:number) => {\r\n    return (dispatch:ThunkDispatch<AppStateType, unknown, UsersActionsType>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        usersAPI.getUsers(currentPage, pageSize)\r\n            .then(data => {\r\n                dispatch(toggleIsFetching(false))\r\n                dispatch(setUsers(data.items))\r\n                // dispatch(setTotalUsersCount(data.totalCount))\r\n                dispatch(setTotalUsersCount(100))\r\n            })\r\n    }\r\n}\r\n\r\nexport const unFollow = (userId:number) => {\r\n    return (dispatch:ThunkDispatch<AppStateType, unknown, UsersActionsType>) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        usersAPI.unFollow(userId)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(acceptUnFollow(userId))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            })\r\n    }\r\n}\r\n\r\nexport const follow = (userId:number) => {\r\n    return (dispatch: ThunkDispatch<AppStateType, unknown, UsersActionsType>) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        usersAPI.follow(userId)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(acceptFollow(userId))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default usersReducer","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {authAPI} from \"../api/api\";\r\n\r\nconst SET_USER_DATA = \"SET-USER-DATA\";\r\n\r\nexport type InitialStateType = {\r\n    userId: null | string\r\n    email: null | string\r\n    login: null | string\r\n    isAuth:boolean\r\n}\r\n\r\n\r\nconst initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth:false\r\n}\r\nconst authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth:true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport  type AuthActionsType =\r\n    SetUserDataActionType\r\n\r\n\r\nexport type SetUserDataActionType = ReturnType<typeof setAuthUserData>\r\n\r\nexport const setAuthUserData = (userId:null | string, email:null | string, login:null | string) => ({\r\n    type: SET_USER_DATA,\r\n    data:{userId, email, login}\r\n} as const)\r\n\r\n//thunk\r\n\r\nexport const getAuth = () => {\r\n    return (dispatch: ThunkDispatch<AppStateType, unknown, AuthActionsType>) => {\r\n        authAPI.authMe().then(data => {\r\n            let {id, email, login} = data.data\r\n            if (data.resultCode === 0) {\r\n                dispatch(setAuthUserData(id, email, login))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default authReducer","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst middlewareEnhancer = applyMiddleware(thunkMiddleware)\r\nconst composedEnhancers = composeWithDevTools(middlewareEnhancer)\r\n\r\nlet store = createStore(rootReducer, composedEnhancers)\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import React from \"react\";\r\nimport s from \"./Friends.module.css\"\r\nimport {SidebarType} from \"../../redux/sidebar-reducer\";\r\n\r\ntype FriendsPropsType = {\r\n    state: SidebarType\r\n}\r\n\r\nconst Friends:React.FC<FriendsPropsType> = (props) => {\r\n    const avatar = props.state.friends.map(f => {\r\n        const activeClass = f.isOnline?s.active:''\r\n        return <div key={f.id}>\r\n            <div className={`${s.avatar} ${activeClass}`}><img src={f.img} alt={\"User \"+f.name}/></div>\r\n            <div className={s.userName}>{f.name}</div>\r\n        </div>\r\n    })\r\n    return (\r\n        <div>\r\n            <div className={s.avatarContainer}>{avatar}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Friends","import React from \"react\";\r\nimport s from \"./Nav.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Friends from \"../Friends/Friends\";\r\nimport {SidebarType} from \"../../redux/sidebar-reducer\";\r\n\r\ntype NavPropsType={\r\n  state:SidebarType\r\n}\r\nconst Nav:React.FC<NavPropsType> = (props) => {\r\n  return <div className={s.navContainer}>\r\n    <nav className={s.nav}>\r\n      <ul>\r\n        <li className={s.item}>\r\n          <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n        </li>\r\n        <li className={s.item}>\r\n          <NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink>\r\n        </li>\r\n        <li className={s.item}>\r\n          <NavLink to=\"/users\" activeClassName={s.active}>Users</NavLink>\r\n        </li>\r\n        <li className={s.item}>\r\n          <NavLink to=\"/news\" activeClassName={s.active}>News</NavLink>\r\n        </li>\r\n        <li className={s.item}>\r\n          <NavLink to=\"/music\" activeClassName={s.active}>Music</NavLink>\r\n        </li>\r\n        <li className={s.item}>\r\n          <NavLink to=\"/settings\" activeClassName={s.active}>Settings</NavLink>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n    <Friends state={props.state}/>\r\n      </div>\r\n\r\n};\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport s from \"./News.module.css\";\r\n\r\nconst News = () => {\r\n  return <div>News News News</div>;\r\n};\r\n\r\nexport default News;\r\n","import React from \"react\";\r\nimport s from \"./Music.module.css\";\r\n\r\nconst Music = () => {\r\n  return <div>Music</div>;\r\n};\r\n\r\nexport default Music;\r\n","import React from \"react\";\r\nimport s from \"./Settings.module.css\";\r\n\r\nconst Settings = () => {\r\n    return <div>Settings</div>;\r\n};\r\n\r\nexport default Settings;","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n/*\r\n********* class component *********\r\nexport const withAuthRedirect=(Component:any)=>{\r\n    class RedirectComponent extends React.Component<any, any>{\r\n        render(){\r\n            if(!this.props.isAuth) return <Redirect to= {\"/login\"}/>\r\n                return <Component {...this.props}/>\r\n        }\r\n    }\r\n    return RedirectComponent\r\n}*/\r\n\r\ntype MapStateToPropsForRedirect={\r\n    isAuth:boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state:AppStateType):MapStateToPropsForRedirect => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent=(props: MapStateToPropsForRedirect)=> {\r\n        let {isAuth,...restProps}=props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    let path = \"/dialogs/\" + props.id\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message","import React, {ChangeEvent} from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\n\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\n  let dialogsElements = props.dialogsPage.dialogs.map((d) => (\n    <DialogItem key={d.id} name={d.name} id={d.id} />\n  ));\n  let messagesElements = props.dialogsPage.messages.map((m) => (\n    <Message message={m.message} key={m.id} />\n  ));\n\n  const onAddMessage = () => props.addMessage();\n  const onMessageTextChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    const text = e.currentTarget.value;\n    props.updateNewMessageText(text);\n  };\n\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogItems}>{dialogsElements}</div>\n      <div className={s.messages}>\n        {messagesElements}\n        <div className={s.sendMessage}>\n          <div>\n            <textarea\n              placeholder={\"Write a message\"}\n              onChange={onMessageTextChange}\n              value={props.dialogsPage.newMessageText}\n            />\n          </div>\n          <div>\n            <button onClick={onAddMessage}>Send</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dialogs;\n","import {\r\n    addMessageActionCreator,\r\n    InitialStateType,\r\n    updateNewMessageTextActionCreator\r\n} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: InitialStateType\r\n\r\n\r\n}\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: () => void,\r\n    updateNewMessageText: (text: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMessage: () => {\r\n            dispatch(addMessageActionCreator())\r\n        },\r\n        updateNewMessageText: (text: string) => {\r\n            dispatch(updateNewMessageTextActionCreator(text))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps),withAuthRedirect) (Dialogs)","export default __webpack_public_path__ + \"static/media/user.d874ab6f.png\";","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport userPhoto from \"./../../assets/images/user.png\"\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UsersContainerPropsType} from \"./UsersContainer\";\r\n\r\nexport type UsersPropsType = {\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: UserType[]\r\n}\r\nconst Users: React.FC<UsersContainerPropsType & UsersPropsType> = (props) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n\r\n    return <div className={s.usersContainer}>\r\n        <div className={s.users}>\r\n            {pages.map(p => {\r\n                const pageClass = s.page + ' ' + (props.currentPage === p ? s.activePage : '')\r\n                return <span className={pageClass}\r\n                             onClick={() => props.onPageChanged(p)}>{p}</span>})}\r\n            {\r\n                props.users.map(u => <div key={u.id} className={s.user}>\r\n                        <div className={s.avatar}>\r\n                            <NavLink to={'/profile/' + u.id}>\r\n                                <div className={s.userPhoto}><img src={u.photos.small ? u.photos.small : userPhoto}\r\n                                                                  alt=\"user\"/></div>\r\n                            </NavLink>\r\n                            <div>\r\n                                {u.followed\r\n                                    ? <button onClick={() => {\r\n                                        props.unFollow(u.id)\r\n                                    }}\r\n                                              disabled={props.followingInProgress.some(id => id === u.id)}>\r\n                                        UnFollow</button>\r\n                                    : <button onClick={() => {\r\n                                        props.follow(u.id)\r\n                                    }}\r\n                                              disabled={props.followingInProgress.some(id => id === u.id)}>Follow</button>}\r\n                            </div>\r\n                        </div>\r\n                        <div className={s.userInfo}>\r\n                            <div className={s.userName}>{u.name}</div>\r\n                            <div className={s.status}>{u.status}</div>\r\n                        </div>\r\n                        <div className={s.userLocation}>\r\n                            <span>{\"u.location.country\"}</span>\r\n                            <span>{\"u.location.city\"}</span>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n        <button>Show More</button>\r\n    </div>\r\n}\r\n\r\nexport default Users","export default __webpack_public_path__ + \"static/media/Interwind-1.5s-367px.59830f26.svg\";","import React from \"react\";\r\nimport preloader from \"../../assets/loader/Interwind-1.5s-367px.svg\";\r\n\r\n\r\nconst Preloader:React.FC=()=>{\r\n    return <div>\r\n        <img src={preloader} alt=\"loader\" style={{width:'100%'}}/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader","import {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    acceptFollow,\r\n    getUsers,\r\n    InitialStateType,\r\n    setCurrentPage,\r\n    acceptUnFollow,\r\n    unFollow, follow\r\n} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass UsersContainer extends React.Component<UsersContainerPropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n        this.props.setCurrentPage(pageNumber)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching\r\n                ? <Preloader/>\r\n                : null\r\n            }\r\n            <Users {...this.props}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.usersPage.users}/>\r\n        </>\r\n    }\r\n\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    usersPage: InitialStateType\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    acceptFollow: (userId: number) => void\r\n    acceptUnFollow: (userId: number) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n}\r\n\r\nexport type UsersContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        usersPage: state.usersPage,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = {\r\n    acceptFollow,\r\n    acceptUnFollow,\r\n    setCurrentPage,\r\n    getUsers,\r\n    follow,\r\n    unFollow\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType> (connect(mapStateToProps, mapDispatchToProps),withAuthRedirect)(UsersContainer)\r\n","import React from 'react';\r\n\r\nexport type ProfileStatusPropTypes = {\r\n    status: string\r\n};\r\n\r\nclass ProfileStatus extends React.Component<ProfileStatusPropTypes> {\r\n    state = {\r\n        editMode: false\r\n    }\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode:true\r\n        })\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode:false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                <div>\r\n                    <span onDoubleClick={\r\n                        this.activateEditMode\r\n                    }>{this.props.status}</span>\r\n                </div>}\r\n\r\n                {this.state.editMode &&\r\n                <div>\r\n                    <input onBlur={this.deactivateEditMode} autoFocus value={this.props.status}></input>\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default ProfileStatus;","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport userPhoto from \"../../../assets/images/user.png\"\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport ProfileStatus from \"../ProfileStatus\";\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: null | ProfileType\r\n}\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({profile}) => {\r\n    if(!profile){\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img\r\n                    src=\"https://s27389.pcdn.co/wp-content/uploads/2019/12/why-network-segmentation-essential-enterprise-1024x440.jpeg\"\r\n                    alt=\"\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img className={s.avatar}\r\n                     src={profile.photos.large ? profile.photos.large : userPhoto}\r\n                     alt={\"User avatar\" + profile.fullName}/>\r\n                <ProfileStatus status=\"Lets fly!!!\"/>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default ProfileInfo","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype postPropsType={\r\n    message:string\r\n    likesCount:number\r\n}\r\nconst Post = (props:postPropsType) => {\r\n    return <div className={s.posts}>\r\n        <div className={s.item}><img\r\n            src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQvQ4aNPrI7S0ZcOI0gguCobJyLVkc7osIoaQ&usqp=CAU\"\r\n            alt=\"\"/>{props.message}\r\n        </div>\r\n        <div><span>Like</span><span> {props.likesCount}</span></div>\r\n    </div>\r\n}\r\n\r\nexport default Post","import React, {ChangeEvent} from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\n\r\n\r\nconst MyPosts: React.FC<MyPostsPropsType> = (props) => {\r\n    const postElements = props.profilePage.posts.map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id}/>)\r\n\r\n    const onAddPost = () => props.addPost()\r\n\r\n    const onPostTextChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        const text = e.currentTarget.value\r\n        props.updateNewPostText(text)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea placeholder='Enter your thoughts'\r\n                              value={props.profilePage.newPostText}\r\n                              onChange={onPostTextChange}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add Post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts","import {addPost, InitialStateType, updateNewPostText} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: InitialStateType\r\n}\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: () => void,\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, {\r\n    addPost, updateNewPostText})(MyPosts)\r\n\r\nexport default MyPostsContainer","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfilePropsType} from \"./ProfileContainer\";\r\n\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n\r\n    return <div>\r\n        <ProfileInfo profile={props.profile}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n}\r\n\r\nexport default Profile","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType, showUserProfile} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n    componentDidMount() {\r\n        let userId = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            userId = 2\r\n        }\r\n        this.props.showUserProfile(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile}/>\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: null | ProfileType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    showUserProfile: (userId: number) => void\r\n}\r\n\r\ntype MatchParamsType = {\r\n    userId: string\r\n}\r\nexport type ProfilePropsType =\r\n    RouteComponentProps<MatchParamsType>\r\n    & MapStateToPropsType\r\n    & MapDispatchToPropsType\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile\r\n})\r\n\r\nexport default compose<React.ComponentType> (connect(mapStateToProps, {showUserProfile}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)\r\n(ProfileContainer)\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './Header.module.css'\r\nimport {HeaderPropsType} from \"./HeaderContainer\";\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    return <header className={s.header}>\r\n        <img src='http://www.logobook.com/wp-content/uploads/2016/10/Community_Builders_and_Building_Materials_logo.svg'\r\n             alt='logo'/>\r\n\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth\r\n                ? <>\r\n                    <div>{props.login}</div>\r\n                    <div>Logout</div>\r\n                </>\r\n                : <NavLink to={'/login'}>Login</NavLink>\r\n            }\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuth, setAuthUserData} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nclass HeaderContainer extends React.Component<HeaderPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getAuth()\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: null | string\r\n}\r\ntype MapDispatchToPropsType = {\r\n    setAuthUserData: (userId: null | string, email: null | string, login: null | string) => void\r\n    getAuth:()=>void\r\n}\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport type HeaderPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nexport default connect(mapStateToProps, {setAuthUserData,getAuth})(HeaderContainer)","import React from \"react\";\r\n\r\nconst Login:React.FC=(props)=>{\r\n\r\n    return (\r\n        <h1>Login</h1>\r\n    )\r\n}\r\n\r\n\r\nexport default Login","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Nav from \"./components/Nav/Nav\";\r\nimport {Route} from \"react-router-dom\";\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\n\r\ntype AppPropsType = {\r\nstore:any\r\n}\r\nconst App: React.FC<AppPropsType> = (props) => {\r\n    const state=props.store.getState()\r\n    return (\r\n        <div className=\"app-wrapper\">\r\n            <HeaderContainer/>\r\n            <Nav state={state.sidebar}/>\r\n            <div className=\"app-wrapper-content\">\r\n                <Route path=\"/dialogs\" render={() =>\r\n                    <DialogsContainer />}/>\r\n                <Route path=\"/profile/:userId?\" render={() =>\r\n                    <ProfileContainer />}/>\r\n                <Route path=\"/users\" render={() =>\r\n                    <UsersContainer />}/>\r\n                <Route path=\"/login\" render={() =>\r\n                    <Login />}/>\r\n                <Route path=\"/news\" component={News}/>\r\n                <Route path=\"/music\" component={Music}/>\r\n                <Route path=\"/settings\" component={Settings}/>\r\n                {/*<Redirect to=\"/profile\"/>*/}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import reportWebVitals from './reportWebVitals';\r\nimport store from \"./redux/redux-store\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport React from \"react\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nlet rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n            <App store={store}/>\r\n            </Provider>\r\n        </BrowserRouter>,\r\n        document.getElementById('root')\r\n    )\r\n}\r\nrerenderEntireTree()\r\n\r\nstore.subscribe(rerenderEntireTree)\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}