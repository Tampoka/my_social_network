{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","DialogItem","props","path","id","className","s","dialog","to","activeClassName","active","name","Message","message","maxLength10","maxLengthCreator","minLength5","minLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messagesElements","messages","m","dialogItems","sendMessage","formData","addMessage","compose","connect","dispatch","addMessageActionCreator","Component","restProps"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,OAAS,wBAAwB,QAAU,yBAAyB,YAAc,+B,sHCoBpPC,EAA6B,SAACC,GAAD,MAAoD,CACjFC,OAAQD,EAAME,KAAKD,S,8BCLRE,EATI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,qBAAKC,UAAWC,IAAEC,OAAlB,SACI,cAAC,IAAD,CAASC,GAAIL,EAAMM,gBAAiBH,IAAEI,OAAtC,SAA+CR,EAAMS,UCAlDC,EANC,SAACV,GACb,OACI,qBAAKG,UAAWC,IAAEO,QAAlB,SAA4BX,EAAMW,W,iCCCpCC,EAAcC,YAAiB,IAC/BC,EAAaC,YAAiB,GA2D9BC,EAAsBC,YAA0B,CAACC,KAAM,qBAAjCD,EAlBwC,SAACjB,GACjE,OACI,uBAAMmB,SAAUnB,EAAMoB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CACIZ,KAAK,UACLa,UAAWC,IACXC,SAAU,CAACC,IAAUb,EAAaE,GAClCY,YAAY,sBAGpB,8BACI,kDAODC,EA1D6B,SAAC3B,GACzC,IAAI4B,EAAkB5B,EAAM6B,YAAYC,QAAQC,KAAI,SAACC,GAAD,OAChD,cAAC,EAAD,CAAuBvB,KAAMuB,EAAEvB,KAAMP,GAAI8B,EAAE9B,IAA1B8B,EAAE9B,OAEnB+B,EAAmBjC,EAAM6B,YAAYK,SAASH,KAAI,SAACI,GAAD,OAClD,cAAC,EAAD,CAASxB,QAASwB,EAAExB,SAAcwB,EAAEjC,OAcxC,OACI,sBAAKC,UAAWC,IAAE0B,QAAlB,UACI,qBAAK3B,UAAWC,IAAEgC,YAAlB,SAAgCR,IAChC,sBAAKzB,UAAWC,IAAE8B,SAAlB,UACKD,EACD,qBAAK9B,UAAWC,IAAEiC,YAAlB,SACI,cAACrB,EAAD,CACIG,SAXH,SAACmB,GACdtC,EAAMuC,WAAWD,EAAS3B,qBCWnB6B,4BAA6BC,aAtBtB,SAAC7C,GACnB,MAAO,CACHiC,YAAajC,EAAMiC,gBAUF,SAACa,GACtB,MAAO,CACHH,WAAY,SAAC5B,GACT+B,EAASC,YAAwBhC,UJPtC,SAA6BiC,GAOhC,OAAOH,YAAQ9C,EAAR8C,EANiB,SAACzC,GACrB,IAAKH,EAAqBG,EAArBH,OAAUgD,EAAf,YAA0B7C,EAA1B,GACA,OAAKH,EACE,cAAC+C,EAAD,eAAeC,IADF,cAAC,IAAD,CAAUvC,GAAI,gBIW3BkC,CAA6Fb","file":"static/js/4.6df676fb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__15v-t\",\"dialogItems\":\"Dialogs_dialogItems__1dXZ2\",\"dialog\":\"Dialogs_dialog__2MkRK\",\"messages\":\"Dialogs_messages__2g7Bj\",\"active\":\"Dialogs_active___A4O3\",\"message\":\"Dialogs_message__17PX9\",\"sendMessage\":\"Dialogs_sendMessage___xD_4\"};","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n/*\r\n********* class component *********\r\nexport const withAuthRedirect=(Component:any)=>{\r\n    class RedirectComponent extends React.Component<any, any>{\r\n        render(){\r\n            if(!this.props.isAuth) return <Redirect to= {\"/login\"}/>\r\n                return <Component {...this.props}/>\r\n        }\r\n    }\r\n    return RedirectComponent\r\n}*/\r\n\r\ntype MapStateToPropsForRedirect={\r\n    isAuth:boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state:AppStateType):MapStateToPropsForRedirect => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent=(props: MapStateToPropsForRedirect)=> {\r\n        let {isAuth,...restProps}=props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    let path = \"/dialogs/\" + props.id\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message","import React from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../FormControls/FormControls\";\nimport {maxLengthCreator, minLengthCreator, required} from \"../../utils/validators/validators\";\n\nconst maxLength10 = maxLengthCreator(10)\nconst minLength5 = minLengthCreator(5)\n\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\n    let dialogsElements = props.dialogsPage.dialogs.map((d) => (\n        <DialogItem key={d.id} name={d.name} id={d.id}/>\n    ));\n    let messagesElements = props.dialogsPage.messages.map((m) => (\n        <Message message={m.message} key={m.id}/>\n    ));\n\n    /*   const onAddMessage = () => props.addMessage();\n       const onMessageTextChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n           const text = e.currentTarget.value;\n           props.updateNewMessageText(text);\n       };\n   */\n\n    const onSubmit = (formData: AddMessageType) => {\n        props.addMessage(formData.message)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogItems}>{dialogsElements}</div>\n            <div className={s.messages}>\n                {messagesElements}\n                <div className={s.sendMessage}>\n                    <AddMessageReduxForm\n                        onSubmit={onSubmit}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\ntype AddMessageType = {\n    message: string\n}\n\n\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field\n                    name=\"message\"\n                    component={Textarea}\n                    validate={[required, maxLength10, minLength5]}\n                    placeholder=\"Write a message\"\n                />\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageReduxForm = reduxForm<AddMessageType>({form: 'dialogsAddMessage'})(AddMessageForm)\nexport default Dialogs;\n","import {\r\n    addMessageActionCreator,\r\n    InitialStateType,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: InitialStateType\r\n\r\n\r\n}\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (message:string) => void,\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (message:string) => {\r\n            dispatch(addMessageActionCreator(message))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps),withAuthRedirect) (Dialogs)"],"sourceRoot":""}