{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","deactivateEditMode","updateStatus","onDoubleClick","onBlur","onKeyPress","e","key","onChange","currentTarget","value","autoFocus","ProfileInfo","profile","src","alt","className","s","descriptionBlock","avatar","photos","large","userPhoto","fullName","Preloader","Post","posts","item","message","likesCount","maxLength10","maxLengthCreator","minLength5","minLengthCreator","MyPosts","React","memo","console","log","postElements","map","p","id","postsBlock","AddPostReduxForm","onSubmit","formData","addPost","post","reduxForm","form","handleSubmit","Field","name","component","Textarea","validate","required","placeholder","MyPostsContainer","connect","state","profilePage","Profile","ProfileContainer","userId","Number","this","match","params","authorizedUserId","history","push","showUserProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.6b6f00a8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"ProfileInfo_avatar__3HJco\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__Zh1WA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__VkIMX\",\"posts\":\"MyPosts_posts__2LCKN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__VpuLr\"};","import React, {ChangeEvent, KeyboardEvent, useEffect, useState} from 'react';\r\n\r\nexport type ProfileStatusPropTypes = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n};\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusPropTypes> = (props) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateEditMode=()=>setEditMode(true)\r\n    const deactivateEditMode=()=> {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onEnterHandler=(e:KeyboardEvent<HTMLInputElement>)=>{\r\n        if(e.key===\"Enter\"){\r\n            deactivateEditMode()\r\n        }\r\n    }\r\n\r\n    const onStatusChangeHandler=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                    <span onDoubleClick={activateEditMode}>\r\n                        {props.status || '---'}</span>\r\n            </div>}\r\n\r\n            {editMode &&\r\n            <div>\r\n                <input onBlur={deactivateEditMode}\r\n                       onKeyPress={onEnterHandler}\r\n                       onChange={onStatusChangeHandler}\r\n                       value={status}\r\n                       autoFocus/>\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport userPhoto from \"../../../assets/images/user.png\"\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"../ProfileStatusWithHooks\";\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({profile, status, updateStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img\r\n                    src=\"https://s27389.pcdn.co/wp-content/uploads/2019/12/why-network-segmentation-essential-enterprise-1024x440.jpeg\"\r\n                    alt=\"\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img className={s.avatar}\r\n                     src={profile.photos.large ? profile.photos.large : userPhoto}\r\n                     alt={\"User avatar\" + profile.fullName}/>\r\n                <ProfileStatusWithHooks status={status}\r\n                                        updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default ProfileInfo","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype postPropsType={\r\n    message:string\r\n    likesCount:number\r\n}\r\nconst Post = (props:postPropsType) => {\r\n    return <div className={s.posts}>\r\n        <div className={s.item}><img\r\n            src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQvQ4aNPrI7S0ZcOI0gguCobJyLVkc7osIoaQ&usqp=CAU\"\r\n            alt=\"\"/>{props.message}\r\n        </div>\r\n        <div><span>Like</span><span> {props.likesCount}</span></div>\r\n    </div>\r\n}\r\n\r\nexport default Post","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, minLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../FormControls/FormControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\nconst minLength5 = minLengthCreator(5)\r\n\r\nconst MyPosts: React.FC<MyPostsPropsType> = React.memo((props) => {\r\n    console.log(\"render Posts\")\r\n    const postElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}\r\n                                                                key={p.id}/>)\r\n\r\n    const onSubmit = (formData: AddPostType) => {\r\n        props.addPost(formData.post)\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Posts</h3>\r\n            <AddPostReduxForm\r\n                onSubmit={onSubmit}/>\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype AddPostType = {\r\n    post: string\r\n}\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"post\"\r\n                       component={Textarea}\r\n                       validate={[required, maxLength10, minLength5]}\r\n                       placeholder='Enter your thoughts'/>\r\n            </div>\r\n            <div>\r\n                <button>Add Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostReduxForm = reduxForm<AddPostType>({form: 'postsAddPost'})(AddPostForm)\r\n\r\n\r\nexport default MyPosts","import {addPost, PostType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    posts: PostType[]\r\n}\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (post:string) => void,\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, {\r\n    addPost})(MyPosts)\r\n\r\nexport default MyPostsContainer","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfilePropsType} from \"./ProfileContainer\";\r\n\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n\r\n    return <div>\r\n        <ProfileInfo profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n}\r\n\r\nexport default Profile","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, ProfileType, showUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n    componentDidMount() {\r\n        let userId = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            userId = Number(this.props.authorizedUserId)\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.showUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        console.log(\"render Profile\")\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    authorizedUserId: string | null,\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    showUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype MatchParamsType = {\r\n    userId: string\r\n}\r\nexport type ProfilePropsType =\r\n    RouteComponentProps<MatchParamsType>\r\n    & MapStateToPropsType\r\n    & MapDispatchToPropsType\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    console.log(\"mstp ProfileContainer\")\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {showUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)\r\n(ProfileContainer)\r\n"],"sourceRoot":""}